void setup_triangle_sine_waves(int bits)
{
    static const char *TAG = "i2s_example";
    int *samples_data = malloc(((bits + 8) / 16) * SAMPLE_PER_CYCLE * 4);
    unsigned int i, sample_val;
    double sin_float, triangle_float, triangle_step = (double)pow(2, bits) / SAMPLE_PER_CYCLE;
    size_t i2s_bytes_write = 0;

    printf("\r\nTest bits=%d free mem=%d, written data=%d\n", bits, esp_get_free_heap_size(), ((bits + 8) / 16) * SAMPLE_PER_CYCLE * 4);

    triangle_float = -(pow(2, bits) / 2 - 1);

    for (i = 0; i < SAMPLE_PER_CYCLE; i++)
    {
        sin_float = 0.5*sin(i * 2 * PI / SAMPLE_PER_CYCLE);
        if (sin_float >= 0)
            triangle_float += triangle_step;
        else
            triangle_float -= triangle_step;

        sin_float *= (pow(2, bits) / 2 - 1);

        if (bits == 16)
        {
            sample_val = 0;
            sample_val += (short)triangle_float;
            sample_val = sample_val << 16;
            sample_val += (short)sin_float;
            samples_data[i] = sample_val;
        }
        else if (bits == 24)
        { // 1-bytes unused
            samples_data[i * 2] = ((int)triangle_float) << 8;
            samples_data[i * 2 + 1] = ((int)sin_float) << 8;
        }
        else
        {
            samples_data[i * 2] = ((int)triangle_float);
            samples_data[i * 2 + 1] = ((int)sin_float);
        }
    }
    ESP_LOGI(TAG, "set clock");
    i2s_set_clk(I2S_NUM, SAMPLE_RATE, bits, 2);
    ESP_LOGI(TAG, "write data");
    i2s_write(I2S_NUM, samples_data, ((bits + 8) / 16) * SAMPLE_PER_CYCLE * 4, &i2s_bytes_write, portMAX_DELAY);

    free(samples_data);
}